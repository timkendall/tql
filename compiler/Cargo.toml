[package]
name = "tql"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
swc_common = "0.16.1"
swc_ecma_ast = "0.64.0"
swc_ecma_codegen = "0.88.0"
dprint-core = "0.49.0"
dprint-plugin-typescript = "0.62.0"
structopt = "0.3"
graphql-tools = "0.0.19"
graphql-parser = "0.4.0"
swc_atoms = "0.2.9"
deno_ast = "0.9.0"
wasm-bindgen = "0.2.63"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[package.metadata]
# no precompiled binaries of `wasm-opt` are available for this platform, you'll want to set `$WASM_OPT` to a preinstalled `wasm-opt` command or disable via `wasm-opt = false` in your manifest
# can manually run `wasm-opt` (after installing with `brew install binaryen`) with `wasm-opt -Oz -o out.wasm in.wasm`
wasm-opt = false

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"