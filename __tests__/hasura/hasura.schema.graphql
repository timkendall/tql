schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "bookmarks"
"""
type bookmarks {
  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """An aggregated array relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!
  createdUtc: timestamp
  id: Int!
  name: String!

  """An object relationship"""
  owner: users!
  ownerUserId: Int!
  parent: Int

  """An object relationship"""
  parentBookmark: bookmarks
  value(
    """JSON select path"""
    path: String
  ): json!
}

"""
aggregated selection of "bookmarks"
"""
type bookmarks_aggregate {
  aggregate: bookmarks_aggregate_fields
  nodes: [bookmarks!]!
}

"""
aggregate fields of "bookmarks"
"""
type bookmarks_aggregate_fields {
  avg: bookmarks_avg_fields
  count(columns: [bookmarks_select_column!], distinct: Boolean): Int
  max: bookmarks_max_fields
  min: bookmarks_min_fields
  stddev: bookmarks_stddev_fields
  stddev_pop: bookmarks_stddev_pop_fields
  stddev_samp: bookmarks_stddev_samp_fields
  sum: bookmarks_sum_fields
  var_pop: bookmarks_var_pop_fields
  var_samp: bookmarks_var_samp_fields
  variance: bookmarks_variance_fields
}

"""
order by aggregate values of table "bookmarks"
"""
input bookmarks_aggregate_order_by {
  avg: bookmarks_avg_order_by
  count: order_by
  max: bookmarks_max_order_by
  min: bookmarks_min_order_by
  stddev: bookmarks_stddev_order_by
  stddev_pop: bookmarks_stddev_pop_order_by
  stddev_samp: bookmarks_stddev_samp_order_by
  sum: bookmarks_sum_order_by
  var_pop: bookmarks_var_pop_order_by
  var_samp: bookmarks_var_samp_order_by
  variance: bookmarks_variance_order_by
}

"""
input type for inserting array relation for remote table "bookmarks"
"""
input bookmarks_arr_rel_insert_input {
  data: [bookmarks_insert_input!]!
  on_conflict: bookmarks_on_conflict
}

"""aggregate avg on columns"""
type bookmarks_avg_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by avg() on columns of table "bookmarks"
"""
input bookmarks_avg_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""
Boolean expression to filter rows from the table "bookmarks". All fields are combined with a logical 'AND'.
"""
input bookmarks_bool_exp {
  _and: [bookmarks_bool_exp]
  _not: bookmarks_bool_exp
  _or: [bookmarks_bool_exp]
  children: bookmarks_bool_exp
  createdUtc: timestamp_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  owner: users_bool_exp
  ownerUserId: Int_comparison_exp
  parent: Int_comparison_exp
  parentBookmark: bookmarks_bool_exp
  value: json_comparison_exp
}

"""
unique or primary key constraints on table "bookmarks"
"""
enum bookmarks_constraint {
  """unique or primary key constraint"""
  idx_16652_primary
}

"""
input type for incrementing integer column in table "bookmarks"
"""
input bookmarks_inc_input {
  id: Int
  ownerUserId: Int
  parent: Int
}

"""
input type for inserting data into table "bookmarks"
"""
input bookmarks_insert_input {
  children: bookmarks_arr_rel_insert_input
  createdUtc: timestamp
  id: Int
  name: String
  owner: users_obj_rel_insert_input
  ownerUserId: Int
  parent: Int
  parentBookmark: bookmarks_obj_rel_insert_input
  value: json
}

"""aggregate max on columns"""
type bookmarks_max_fields {
  createdUtc: timestamp
  id: Int
  name: String
  ownerUserId: Int
  parent: Int
}

"""
order by max() on columns of table "bookmarks"
"""
input bookmarks_max_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate min on columns"""
type bookmarks_min_fields {
  createdUtc: timestamp
  id: Int
  name: String
  ownerUserId: Int
  parent: Int
}

"""
order by min() on columns of table "bookmarks"
"""
input bookmarks_min_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  ownerUserId: order_by
  parent: order_by
}

"""
response of any mutation on the table "bookmarks"
"""
type bookmarks_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [bookmarks!]!
}

"""
input type for inserting object relation for remote table "bookmarks"
"""
input bookmarks_obj_rel_insert_input {
  data: bookmarks_insert_input!
  on_conflict: bookmarks_on_conflict
}

"""
on conflict condition type for table "bookmarks"
"""
input bookmarks_on_conflict {
  constraint: bookmarks_constraint!
  update_columns: [bookmarks_update_column!]!
  where: bookmarks_bool_exp
}

"""
ordering options when selecting data from "bookmarks"
"""
input bookmarks_order_by {
  children_aggregate: bookmarks_aggregate_order_by
  createdUtc: order_by
  id: order_by
  name: order_by
  owner: users_order_by
  ownerUserId: order_by
  parent: order_by
  parentBookmark: bookmarks_order_by
  value: order_by
}

"""
primary key columns input for table: "bookmarks"
"""
input bookmarks_pk_columns_input {
  id: Int!
}

"""
select columns of table "bookmarks"
"""
enum bookmarks_select_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  ownerUserId

  """column name"""
  parent

  """column name"""
  value
}

"""
input type for updating data in table "bookmarks"
"""
input bookmarks_set_input {
  createdUtc: timestamp
  id: Int
  name: String
  ownerUserId: Int
  parent: Int
  value: json
}

"""aggregate stddev on columns"""
type bookmarks_stddev_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by stddev() on columns of table "bookmarks"
"""
input bookmarks_stddev_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate stddev_pop on columns"""
type bookmarks_stddev_pop_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by stddev_pop() on columns of table "bookmarks"
"""
input bookmarks_stddev_pop_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate stddev_samp on columns"""
type bookmarks_stddev_samp_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by stddev_samp() on columns of table "bookmarks"
"""
input bookmarks_stddev_samp_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate sum on columns"""
type bookmarks_sum_fields {
  id: Int
  ownerUserId: Int
  parent: Int
}

"""
order by sum() on columns of table "bookmarks"
"""
input bookmarks_sum_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""
update columns of table "bookmarks"
"""
enum bookmarks_update_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  ownerUserId

  """column name"""
  parent

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type bookmarks_var_pop_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by var_pop() on columns of table "bookmarks"
"""
input bookmarks_var_pop_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate var_samp on columns"""
type bookmarks_var_samp_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by var_samp() on columns of table "bookmarks"
"""
input bookmarks_var_samp_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

"""aggregate variance on columns"""
type bookmarks_variance_fields {
  id: Float
  ownerUserId: Float
  parent: Float
}

"""
order by variance() on columns of table "bookmarks"
"""
input bookmarks_variance_order_by {
  id: order_by
  ownerUserId: order_by
  parent: order_by
}

scalar json

"""
expression to compare columns of type json. All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "bookmarks"
  """
  delete_bookmarks(
    """filter the rows which have to be deleted"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  delete single row from the table: "bookmarks"
  """
  delete_bookmarks_by_pk(id: Int!): bookmarks

  """
  delete data from the table: "playlist_items"
  """
  delete_playlist_items(
    """filter the rows which have to be deleted"""
    where: playlist_items_bool_exp!
  ): playlist_items_mutation_response

  """
  delete single row from the table: "playlist_items"
  """
  delete_playlist_items_by_pk(id: Int!): playlist_items

  """
  delete data from the table: "playlists"
  """
  delete_playlists(
    """filter the rows which have to be deleted"""
    where: playlists_bool_exp!
  ): playlists_mutation_response

  """
  delete single row from the table: "playlists"
  """
  delete_playlists_by_pk(id: Int!): playlists

  """
  delete data from the table: "tracks"
  """
  delete_tracks(
    """filter the rows which have to be deleted"""
    where: tracks_bool_exp!
  ): tracks_mutation_response

  """
  delete single row from the table: "tracks"
  """
  delete_tracks_by_pk(id: Int!): tracks

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "bookmarks"
  """
  insert_bookmarks(
    """the rows to be inserted"""
    objects: [bookmarks_insert_input!]!

    """on conflict condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks_mutation_response

  """
  insert a single row into the table: "bookmarks"
  """
  insert_bookmarks_one(
    """the row to be inserted"""
    object: bookmarks_insert_input!

    """on conflict condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks

  """
  insert data into the table: "playlist_items"
  """
  insert_playlist_items(
    """the rows to be inserted"""
    objects: [playlist_items_insert_input!]!

    """on conflict condition"""
    on_conflict: playlist_items_on_conflict
  ): playlist_items_mutation_response

  """
  insert a single row into the table: "playlist_items"
  """
  insert_playlist_items_one(
    """the row to be inserted"""
    object: playlist_items_insert_input!

    """on conflict condition"""
    on_conflict: playlist_items_on_conflict
  ): playlist_items

  """
  insert data into the table: "playlists"
  """
  insert_playlists(
    """the rows to be inserted"""
    objects: [playlists_insert_input!]!

    """on conflict condition"""
    on_conflict: playlists_on_conflict
  ): playlists_mutation_response

  """
  insert a single row into the table: "playlists"
  """
  insert_playlists_one(
    """the row to be inserted"""
    object: playlists_insert_input!

    """on conflict condition"""
    on_conflict: playlists_on_conflict
  ): playlists

  """
  insert data into the table: "tracks"
  """
  insert_tracks(
    """the rows to be inserted"""
    objects: [tracks_insert_input!]!

    """on conflict condition"""
    on_conflict: tracks_on_conflict
  ): tracks_mutation_response

  """
  insert a single row into the table: "tracks"
  """
  insert_tracks_one(
    """the row to be inserted"""
    object: tracks_insert_input!

    """on conflict condition"""
    on_conflict: tracks_on_conflict
  ): tracks

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "bookmarks"
  """
  update_bookmarks(
    """increments the integer columns with given value of the filtered values"""
    _inc: bookmarks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input

    """filter the rows which have to be updated"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  update single row of the table: "bookmarks"
  """
  update_bookmarks_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: bookmarks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input
    pk_columns: bookmarks_pk_columns_input!
  ): bookmarks

  """
  update data of the table: "playlist_items"
  """
  update_playlist_items(
    """increments the integer columns with given value of the filtered values"""
    _inc: playlist_items_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: playlist_items_set_input

    """filter the rows which have to be updated"""
    where: playlist_items_bool_exp!
  ): playlist_items_mutation_response

  """
  update single row of the table: "playlist_items"
  """
  update_playlist_items_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: playlist_items_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: playlist_items_set_input
    pk_columns: playlist_items_pk_columns_input!
  ): playlist_items

  """
  update data of the table: "playlists"
  """
  update_playlists(
    """increments the integer columns with given value of the filtered values"""
    _inc: playlists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: playlists_set_input

    """filter the rows which have to be updated"""
    where: playlists_bool_exp!
  ): playlists_mutation_response

  """
  update single row of the table: "playlists"
  """
  update_playlists_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: playlists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: playlists_set_input
    pk_columns: playlists_pk_columns_input!
  ): playlists

  """
  update data of the table: "tracks"
  """
  update_tracks(
    """increments the integer columns with given value of the filtered values"""
    _inc: tracks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tracks_set_input

    """filter the rows which have to be updated"""
    where: tracks_bool_exp!
  ): tracks_mutation_response

  """
  update single row of the table: "tracks"
  """
  update_tracks_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: tracks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tracks_set_input
    pk_columns: tracks_pk_columns_input!
  ): tracks

  """
  update data of the table: "users"
  """
  update_users(
    """increments the integer columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "playlist_items"
"""
type playlist_items {
  createdUtc: timestamp
  id: Int!
  playlistId: Int!
  position: Int!
  trackId: Int!
}

"""
aggregated selection of "playlist_items"
"""
type playlist_items_aggregate {
  aggregate: playlist_items_aggregate_fields
  nodes: [playlist_items!]!
}

"""
aggregate fields of "playlist_items"
"""
type playlist_items_aggregate_fields {
  avg: playlist_items_avg_fields
  count(columns: [playlist_items_select_column!], distinct: Boolean): Int
  max: playlist_items_max_fields
  min: playlist_items_min_fields
  stddev: playlist_items_stddev_fields
  stddev_pop: playlist_items_stddev_pop_fields
  stddev_samp: playlist_items_stddev_samp_fields
  sum: playlist_items_sum_fields
  var_pop: playlist_items_var_pop_fields
  var_samp: playlist_items_var_samp_fields
  variance: playlist_items_variance_fields
}

"""
order by aggregate values of table "playlist_items"
"""
input playlist_items_aggregate_order_by {
  avg: playlist_items_avg_order_by
  count: order_by
  max: playlist_items_max_order_by
  min: playlist_items_min_order_by
  stddev: playlist_items_stddev_order_by
  stddev_pop: playlist_items_stddev_pop_order_by
  stddev_samp: playlist_items_stddev_samp_order_by
  sum: playlist_items_sum_order_by
  var_pop: playlist_items_var_pop_order_by
  var_samp: playlist_items_var_samp_order_by
  variance: playlist_items_variance_order_by
}

"""
input type for inserting array relation for remote table "playlist_items"
"""
input playlist_items_arr_rel_insert_input {
  data: [playlist_items_insert_input!]!
  on_conflict: playlist_items_on_conflict
}

"""aggregate avg on columns"""
type playlist_items_avg_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by avg() on columns of table "playlist_items"
"""
input playlist_items_avg_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""
Boolean expression to filter rows from the table "playlist_items". All fields are combined with a logical 'AND'.
"""
input playlist_items_bool_exp {
  _and: [playlist_items_bool_exp]
  _not: playlist_items_bool_exp
  _or: [playlist_items_bool_exp]
  createdUtc: timestamp_comparison_exp
  id: Int_comparison_exp
  playlistId: Int_comparison_exp
  position: Int_comparison_exp
  trackId: Int_comparison_exp
}

"""
unique or primary key constraints on table "playlist_items"
"""
enum playlist_items_constraint {
  """unique or primary key constraint"""
  idx_16694_primary
}

"""
input type for incrementing integer column in table "playlist_items"
"""
input playlist_items_inc_input {
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""
input type for inserting data into table "playlist_items"
"""
input playlist_items_insert_input {
  createdUtc: timestamp
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""aggregate max on columns"""
type playlist_items_max_fields {
  createdUtc: timestamp
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""
order by max() on columns of table "playlist_items"
"""
input playlist_items_max_order_by {
  createdUtc: order_by
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate min on columns"""
type playlist_items_min_fields {
  createdUtc: timestamp
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""
order by min() on columns of table "playlist_items"
"""
input playlist_items_min_order_by {
  createdUtc: order_by
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""
response of any mutation on the table "playlist_items"
"""
type playlist_items_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [playlist_items!]!
}

"""
input type for inserting object relation for remote table "playlist_items"
"""
input playlist_items_obj_rel_insert_input {
  data: playlist_items_insert_input!
  on_conflict: playlist_items_on_conflict
}

"""
on conflict condition type for table "playlist_items"
"""
input playlist_items_on_conflict {
  constraint: playlist_items_constraint!
  update_columns: [playlist_items_update_column!]!
  where: playlist_items_bool_exp
}

"""
ordering options when selecting data from "playlist_items"
"""
input playlist_items_order_by {
  createdUtc: order_by
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""
primary key columns input for table: "playlist_items"
"""
input playlist_items_pk_columns_input {
  id: Int!
}

"""
select columns of table "playlist_items"
"""
enum playlist_items_select_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  playlistId

  """column name"""
  position

  """column name"""
  trackId
}

"""
input type for updating data in table "playlist_items"
"""
input playlist_items_set_input {
  createdUtc: timestamp
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""aggregate stddev on columns"""
type playlist_items_stddev_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by stddev() on columns of table "playlist_items"
"""
input playlist_items_stddev_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate stddev_pop on columns"""
type playlist_items_stddev_pop_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by stddev_pop() on columns of table "playlist_items"
"""
input playlist_items_stddev_pop_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate stddev_samp on columns"""
type playlist_items_stddev_samp_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by stddev_samp() on columns of table "playlist_items"
"""
input playlist_items_stddev_samp_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate sum on columns"""
type playlist_items_sum_fields {
  id: Int
  playlistId: Int
  position: Int
  trackId: Int
}

"""
order by sum() on columns of table "playlist_items"
"""
input playlist_items_sum_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""
update columns of table "playlist_items"
"""
enum playlist_items_update_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  playlistId

  """column name"""
  position

  """column name"""
  trackId
}

"""aggregate var_pop on columns"""
type playlist_items_var_pop_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by var_pop() on columns of table "playlist_items"
"""
input playlist_items_var_pop_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate var_samp on columns"""
type playlist_items_var_samp_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by var_samp() on columns of table "playlist_items"
"""
input playlist_items_var_samp_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""aggregate variance on columns"""
type playlist_items_variance_fields {
  id: Float
  playlistId: Float
  position: Float
  trackId: Float
}

"""
order by variance() on columns of table "playlist_items"
"""
input playlist_items_variance_order_by {
  id: order_by
  playlistId: order_by
  position: order_by
  trackId: order_by
}

"""
columns and relationships of "playlists"
"""
type playlists {
  createdUtc: timestamptz
  id: Int!
  name: String!
  ownerUserId: Int!
}

"""
aggregated selection of "playlists"
"""
type playlists_aggregate {
  aggregate: playlists_aggregate_fields
  nodes: [playlists!]!
}

"""
aggregate fields of "playlists"
"""
type playlists_aggregate_fields {
  avg: playlists_avg_fields
  count(columns: [playlists_select_column!], distinct: Boolean): Int
  max: playlists_max_fields
  min: playlists_min_fields
  stddev: playlists_stddev_fields
  stddev_pop: playlists_stddev_pop_fields
  stddev_samp: playlists_stddev_samp_fields
  sum: playlists_sum_fields
  var_pop: playlists_var_pop_fields
  var_samp: playlists_var_samp_fields
  variance: playlists_variance_fields
}

"""
order by aggregate values of table "playlists"
"""
input playlists_aggregate_order_by {
  avg: playlists_avg_order_by
  count: order_by
  max: playlists_max_order_by
  min: playlists_min_order_by
  stddev: playlists_stddev_order_by
  stddev_pop: playlists_stddev_pop_order_by
  stddev_samp: playlists_stddev_samp_order_by
  sum: playlists_sum_order_by
  var_pop: playlists_var_pop_order_by
  var_samp: playlists_var_samp_order_by
  variance: playlists_variance_order_by
}

"""
input type for inserting array relation for remote table "playlists"
"""
input playlists_arr_rel_insert_input {
  data: [playlists_insert_input!]!
  on_conflict: playlists_on_conflict
}

"""aggregate avg on columns"""
type playlists_avg_fields {
  id: Float
  ownerUserId: Float
}

"""
order by avg() on columns of table "playlists"
"""
input playlists_avg_order_by {
  id: order_by
  ownerUserId: order_by
}

"""
Boolean expression to filter rows from the table "playlists". All fields are combined with a logical 'AND'.
"""
input playlists_bool_exp {
  _and: [playlists_bool_exp]
  _not: playlists_bool_exp
  _or: [playlists_bool_exp]
  createdUtc: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  ownerUserId: Int_comparison_exp
}

"""
unique or primary key constraints on table "playlists"
"""
enum playlists_constraint {
  """unique or primary key constraint"""
  idx_16687_primary
}

"""
input type for incrementing integer column in table "playlists"
"""
input playlists_inc_input {
  id: Int
  ownerUserId: Int
}

"""
input type for inserting data into table "playlists"
"""
input playlists_insert_input {
  createdUtc: timestamptz
  id: Int
  name: String
  ownerUserId: Int
}

"""aggregate max on columns"""
type playlists_max_fields {
  createdUtc: timestamptz
  id: Int
  name: String
  ownerUserId: Int
}

"""
order by max() on columns of table "playlists"
"""
input playlists_max_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  ownerUserId: order_by
}

"""aggregate min on columns"""
type playlists_min_fields {
  createdUtc: timestamptz
  id: Int
  name: String
  ownerUserId: Int
}

"""
order by min() on columns of table "playlists"
"""
input playlists_min_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  ownerUserId: order_by
}

"""
response of any mutation on the table "playlists"
"""
type playlists_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [playlists!]!
}

"""
input type for inserting object relation for remote table "playlists"
"""
input playlists_obj_rel_insert_input {
  data: playlists_insert_input!
  on_conflict: playlists_on_conflict
}

"""
on conflict condition type for table "playlists"
"""
input playlists_on_conflict {
  constraint: playlists_constraint!
  update_columns: [playlists_update_column!]!
  where: playlists_bool_exp
}

"""
ordering options when selecting data from "playlists"
"""
input playlists_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  ownerUserId: order_by
}

"""
primary key columns input for table: "playlists"
"""
input playlists_pk_columns_input {
  id: Int!
}

"""
select columns of table "playlists"
"""
enum playlists_select_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  ownerUserId
}

"""
input type for updating data in table "playlists"
"""
input playlists_set_input {
  createdUtc: timestamptz
  id: Int
  name: String
  ownerUserId: Int
}

"""aggregate stddev on columns"""
type playlists_stddev_fields {
  id: Float
  ownerUserId: Float
}

"""
order by stddev() on columns of table "playlists"
"""
input playlists_stddev_order_by {
  id: order_by
  ownerUserId: order_by
}

"""aggregate stddev_pop on columns"""
type playlists_stddev_pop_fields {
  id: Float
  ownerUserId: Float
}

"""
order by stddev_pop() on columns of table "playlists"
"""
input playlists_stddev_pop_order_by {
  id: order_by
  ownerUserId: order_by
}

"""aggregate stddev_samp on columns"""
type playlists_stddev_samp_fields {
  id: Float
  ownerUserId: Float
}

"""
order by stddev_samp() on columns of table "playlists"
"""
input playlists_stddev_samp_order_by {
  id: order_by
  ownerUserId: order_by
}

"""aggregate sum on columns"""
type playlists_sum_fields {
  id: Int
  ownerUserId: Int
}

"""
order by sum() on columns of table "playlists"
"""
input playlists_sum_order_by {
  id: order_by
  ownerUserId: order_by
}

"""
update columns of table "playlists"
"""
enum playlists_update_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  ownerUserId
}

"""aggregate var_pop on columns"""
type playlists_var_pop_fields {
  id: Float
  ownerUserId: Float
}

"""
order by var_pop() on columns of table "playlists"
"""
input playlists_var_pop_order_by {
  id: order_by
  ownerUserId: order_by
}

"""aggregate var_samp on columns"""
type playlists_var_samp_fields {
  id: Float
  ownerUserId: Float
}

"""
order by var_samp() on columns of table "playlists"
"""
input playlists_var_samp_order_by {
  id: order_by
  ownerUserId: order_by
}

"""aggregate variance on columns"""
type playlists_variance_fields {
  id: Float
  ownerUserId: Float
}

"""
order by variance() on columns of table "playlists"
"""
input playlists_variance_order_by {
  id: order_by
  ownerUserId: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "bookmarks"
  """
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """
  fetch aggregated fields from the table: "bookmarks"
  """
  bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: Int!): bookmarks

  """
  fetch data from the table: "playlist_items"
  """
  playlist_items(
    """distinct select on columns"""
    distinct_on: [playlist_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlist_items_order_by!]

    """filter the rows returned"""
    where: playlist_items_bool_exp
  ): [playlist_items!]!

  """
  fetch aggregated fields from the table: "playlist_items"
  """
  playlist_items_aggregate(
    """distinct select on columns"""
    distinct_on: [playlist_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlist_items_order_by!]

    """filter the rows returned"""
    where: playlist_items_bool_exp
  ): playlist_items_aggregate!

  """fetch data from the table: "playlist_items" using primary key columns"""
  playlist_items_by_pk(id: Int!): playlist_items

  """
  fetch data from the table: "playlists"
  """
  playlists(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): [playlists!]!

  """
  fetch aggregated fields from the table: "playlists"
  """
  playlists_aggregate(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): playlists_aggregate!

  """fetch data from the table: "playlists" using primary key columns"""
  playlists_by_pk(id: Int!): playlists

  """
  fetch data from the table: "tracks"
  """
  tracks(
    """distinct select on columns"""
    distinct_on: [tracks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tracks_order_by!]

    """filter the rows returned"""
    where: tracks_bool_exp
  ): [tracks!]!

  """
  fetch aggregated fields from the table: "tracks"
  """
  tracks_aggregate(
    """distinct select on columns"""
    distinct_on: [tracks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tracks_order_by!]

    """filter the rows returned"""
    where: tracks_bool_exp
  ): tracks_aggregate!

  """fetch data from the table: "tracks" using primary key columns"""
  tracks_by_pk(id: Int!): tracks

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "bookmarks"
  """
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """
  fetch aggregated fields from the table: "bookmarks"
  """
  bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: Int!): bookmarks

  """
  fetch data from the table: "playlist_items"
  """
  playlist_items(
    """distinct select on columns"""
    distinct_on: [playlist_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlist_items_order_by!]

    """filter the rows returned"""
    where: playlist_items_bool_exp
  ): [playlist_items!]!

  """
  fetch aggregated fields from the table: "playlist_items"
  """
  playlist_items_aggregate(
    """distinct select on columns"""
    distinct_on: [playlist_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlist_items_order_by!]

    """filter the rows returned"""
    where: playlist_items_bool_exp
  ): playlist_items_aggregate!

  """fetch data from the table: "playlist_items" using primary key columns"""
  playlist_items_by_pk(id: Int!): playlist_items

  """
  fetch data from the table: "playlists"
  """
  playlists(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): [playlists!]!

  """
  fetch aggregated fields from the table: "playlists"
  """
  playlists_aggregate(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): playlists_aggregate!

  """fetch data from the table: "playlists" using primary key columns"""
  playlists_by_pk(id: Int!): playlists

  """
  fetch data from the table: "tracks"
  """
  tracks(
    """distinct select on columns"""
    distinct_on: [tracks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tracks_order_by!]

    """filter the rows returned"""
    where: tracks_bool_exp
  ): [tracks!]!

  """
  fetch aggregated fields from the table: "tracks"
  """
  tracks_aggregate(
    """distinct select on columns"""
    distinct_on: [tracks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tracks_order_by!]

    """filter the rows returned"""
    where: tracks_bool_exp
  ): tracks_aggregate!

  """fetch data from the table: "tracks" using primary key columns"""
  tracks_by_pk(id: Int!): tracks

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "tracks"
"""
type tracks {
  createdUtc: timestamp!
  id: Int!
  name: String!
  napsterId: String
}

"""
aggregated selection of "tracks"
"""
type tracks_aggregate {
  aggregate: tracks_aggregate_fields
  nodes: [tracks!]!
}

"""
aggregate fields of "tracks"
"""
type tracks_aggregate_fields {
  avg: tracks_avg_fields
  count(columns: [tracks_select_column!], distinct: Boolean): Int
  max: tracks_max_fields
  min: tracks_min_fields
  stddev: tracks_stddev_fields
  stddev_pop: tracks_stddev_pop_fields
  stddev_samp: tracks_stddev_samp_fields
  sum: tracks_sum_fields
  var_pop: tracks_var_pop_fields
  var_samp: tracks_var_samp_fields
  variance: tracks_variance_fields
}

"""
order by aggregate values of table "tracks"
"""
input tracks_aggregate_order_by {
  avg: tracks_avg_order_by
  count: order_by
  max: tracks_max_order_by
  min: tracks_min_order_by
  stddev: tracks_stddev_order_by
  stddev_pop: tracks_stddev_pop_order_by
  stddev_samp: tracks_stddev_samp_order_by
  sum: tracks_sum_order_by
  var_pop: tracks_var_pop_order_by
  var_samp: tracks_var_samp_order_by
  variance: tracks_variance_order_by
}

"""
input type for inserting array relation for remote table "tracks"
"""
input tracks_arr_rel_insert_input {
  data: [tracks_insert_input!]!
  on_conflict: tracks_on_conflict
}

"""aggregate avg on columns"""
type tracks_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "tracks"
"""
input tracks_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "tracks". All fields are combined with a logical 'AND'.
"""
input tracks_bool_exp {
  _and: [tracks_bool_exp]
  _not: tracks_bool_exp
  _or: [tracks_bool_exp]
  createdUtc: timestamp_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  napsterId: String_comparison_exp
}

"""
unique or primary key constraints on table "tracks"
"""
enum tracks_constraint {
  """unique or primary key constraint"""
  idx_16710_napsterid

  """unique or primary key constraint"""
  idx_16710_primary
}

"""
input type for incrementing integer column in table "tracks"
"""
input tracks_inc_input {
  id: Int
}

"""
input type for inserting data into table "tracks"
"""
input tracks_insert_input {
  createdUtc: timestamp
  id: Int
  name: String
  napsterId: String
}

"""aggregate max on columns"""
type tracks_max_fields {
  createdUtc: timestamp
  id: Int
  name: String
  napsterId: String
}

"""
order by max() on columns of table "tracks"
"""
input tracks_max_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  napsterId: order_by
}

"""aggregate min on columns"""
type tracks_min_fields {
  createdUtc: timestamp
  id: Int
  name: String
  napsterId: String
}

"""
order by min() on columns of table "tracks"
"""
input tracks_min_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  napsterId: order_by
}

"""
response of any mutation on the table "tracks"
"""
type tracks_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tracks!]!
}

"""
input type for inserting object relation for remote table "tracks"
"""
input tracks_obj_rel_insert_input {
  data: tracks_insert_input!
  on_conflict: tracks_on_conflict
}

"""
on conflict condition type for table "tracks"
"""
input tracks_on_conflict {
  constraint: tracks_constraint!
  update_columns: [tracks_update_column!]!
  where: tracks_bool_exp
}

"""
ordering options when selecting data from "tracks"
"""
input tracks_order_by {
  createdUtc: order_by
  id: order_by
  name: order_by
  napsterId: order_by
}

"""
primary key columns input for table: "tracks"
"""
input tracks_pk_columns_input {
  id: Int!
}

"""
select columns of table "tracks"
"""
enum tracks_select_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  napsterId
}

"""
input type for updating data in table "tracks"
"""
input tracks_set_input {
  createdUtc: timestamp
  id: Int
  name: String
  napsterId: String
}

"""aggregate stddev on columns"""
type tracks_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "tracks"
"""
input tracks_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type tracks_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "tracks"
"""
input tracks_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type tracks_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "tracks"
"""
input tracks_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type tracks_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "tracks"
"""
input tracks_sum_order_by {
  id: order_by
}

"""
update columns of table "tracks"
"""
enum tracks_update_column {
  """column name"""
  createdUtc

  """column name"""
  id

  """column name"""
  name

  """column name"""
  napsterId
}

"""aggregate var_pop on columns"""
type tracks_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "tracks"
"""
input tracks_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type tracks_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "tracks"
"""
input tracks_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type tracks_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "tracks"
"""
input tracks_variance_order_by {
  id: order_by
}

"""
columns and relationships of "users"
"""
type users {
  """An array relationship"""
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """An aggregated array relationship"""
  bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!
  createdUtc: timestamp
  email: String
  id: Int!

  """An array relationship"""
  playlists(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): [playlists!]!

  """An aggregated array relationship"""
  playlists_aggregate(
    """distinct select on columns"""
    distinct_on: [playlists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [playlists_order_by!]

    """filter the rows returned"""
    where: playlists_bool_exp
  ): playlists_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  bookmarks: bookmarks_bool_exp
  createdUtc: timestamp_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  playlists: playlists_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  idx_16717_primary
}

"""
input type for incrementing integer column in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  bookmarks: bookmarks_arr_rel_insert_input
  createdUtc: timestamp
  email: String
  id: Int
  playlists: playlists_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  createdUtc: timestamp
  email: String
  id: Int
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  createdUtc: order_by
  email: order_by
  id: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  createdUtc: timestamp
  email: String
  id: Int
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  createdUtc: order_by
  email: order_by
  id: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  bookmarks_aggregate: bookmarks_aggregate_order_by
  createdUtc: order_by
  email: order_by
  id: order_by
  playlists_aggregate: playlists_aggregate_order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  createdUtc

  """column name"""
  email

  """column name"""
  id
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  createdUtc: timestamp
  email: String
  id: Int
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  id: order_by
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  createdUtc

  """column name"""
  email

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  id: order_by
}